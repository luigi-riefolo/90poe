// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ingestor.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type State int32

const (
	State_UNKNOWN    State = 0
	State_ACTIVE     State = 1
	State_FAILED     State = 2
	State_TERMINATED State = 3
)

var State_name = map[int32]string{
	0: "UNKNOWN",
	1: "ACTIVE",
	2: "FAILED",
	3: "TERMINATED",
}

var State_value = map[string]int32{
	"UNKNOWN":    0,
	"ACTIVE":     1,
	"FAILED":     2,
	"TERMINATED": 3,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1ec7935f9b1a4496, []int{0}
}

// IngestRequest represents the
// requested local file to ingest
type IngestRequest struct {
	FileName             string   `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IngestRequest) Reset()         { *m = IngestRequest{} }
func (m *IngestRequest) String() string { return proto.CompactTextString(m) }
func (*IngestRequest) ProtoMessage()    {}
func (*IngestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ec7935f9b1a4496, []int{0}
}

func (m *IngestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IngestRequest.Unmarshal(m, b)
}
func (m *IngestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IngestRequest.Marshal(b, m, deterministic)
}
func (m *IngestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngestRequest.Merge(m, src)
}
func (m *IngestRequest) XXX_Size() int {
	return xxx_messageInfo_IngestRequest.Size(m)
}
func (m *IngestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IngestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IngestRequest proto.InternalMessageInfo

func (m *IngestRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

// IngestResponse represents the information
// and status of the requested ingestor job
type IngestResponse struct {
	JobId                string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	State                State    `protobuf:"varint,2,opt,name=state,proto3,enum=ingestor.State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IngestResponse) Reset()         { *m = IngestResponse{} }
func (m *IngestResponse) String() string { return proto.CompactTextString(m) }
func (*IngestResponse) ProtoMessage()    {}
func (*IngestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ec7935f9b1a4496, []int{1}
}

func (m *IngestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IngestResponse.Unmarshal(m, b)
}
func (m *IngestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IngestResponse.Marshal(b, m, deterministic)
}
func (m *IngestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngestResponse.Merge(m, src)
}
func (m *IngestResponse) XXX_Size() int {
	return xxx_messageInfo_IngestResponse.Size(m)
}
func (m *IngestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IngestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IngestResponse proto.InternalMessageInfo

func (m *IngestResponse) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *IngestResponse) GetState() State {
	if m != nil {
		return m.State
	}
	return State_UNKNOWN
}

func init() {
	proto.RegisterEnum("ingestor.State", State_name, State_value)
	proto.RegisterType((*IngestRequest)(nil), "ingestor.IngestRequest")
	proto.RegisterType((*IngestResponse)(nil), "ingestor.IngestResponse")
}

func init() { proto.RegisterFile("ingestor.proto", fileDescriptor_1ec7935f9b1a4496) }

var fileDescriptor_1ec7935f9b1a4496 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x50, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x6d, 0xa2, 0x89, 0xe9, 0x88, 0x31, 0x0e, 0x88, 0x41, 0x2f, 0x25, 0x20, 0x14, 0x91, 0x1e,
	0xea, 0xd5, 0x4b, 0xb4, 0x29, 0x5d, 0xd4, 0x15, 0x62, 0x54, 0xf0, 0x52, 0x12, 0x32, 0xca, 0x96,
	0x74, 0x37, 0x66, 0xd7, 0xff, 0x2f, 0x49, 0x5a, 0x45, 0xbc, 0xbd, 0x2f, 0x66, 0xe6, 0x0d, 0xf8,
	0x42, 0x7e, 0x90, 0x36, 0xaa, 0x99, 0xd4, 0x8d, 0x32, 0x0a, 0xbd, 0x2d, 0x8f, 0x2e, 0xe1, 0x80,
	0x75, 0x38, 0xa5, 0xcf, 0x2f, 0xd2, 0x06, 0xcf, 0x60, 0xf8, 0x2e, 0x2a, 0x5a, 0xca, 0x7c, 0x4d,
	0xa1, 0x35, 0xb2, 0xc6, 0xc3, 0xd4, 0x6b, 0x05, 0x9e, 0xaf, 0x29, 0xe2, 0xe0, 0x6f, 0xd3, 0xba,
	0x56, 0x52, 0x13, 0x1e, 0x83, 0xbb, 0x52, 0xc5, 0x52, 0x94, 0x9b, 0xac, 0xb3, 0x52, 0x05, 0x2b,
	0xf1, 0x1c, 0x1c, 0x6d, 0x72, 0x43, 0xa1, 0x3d, 0xb2, 0xc6, 0xfe, 0xf4, 0x70, 0xf2, 0x73, 0xc0,
	0x53, 0x2b, 0xa7, 0xbd, 0x7b, 0x71, 0x0d, 0x4e, 0xc7, 0x71, 0x1f, 0xf6, 0x9e, 0xf9, 0x1d, 0x7f,
	0x7c, 0xe5, 0xc1, 0x00, 0x01, 0xdc, 0xf8, 0x36, 0x63, 0x2f, 0x49, 0x60, 0xb5, 0x78, 0x1e, 0xb3,
	0xfb, 0x64, 0x16, 0xd8, 0xe8, 0x03, 0x64, 0x49, 0xfa, 0xc0, 0x78, 0x9c, 0x25, 0xb3, 0x60, 0x67,
	0x9a, 0x81, 0xc7, 0x36, 0x63, 0x71, 0x01, 0x47, 0x3d, 0x9e, 0x8b, 0x8a, 0x16, 0xb9, 0x2c, 0x2b,
	0x6a, 0xf0, 0xe4, 0x77, 0xed, 0x9f, 0x92, 0xa7, 0xe1, 0x7f, 0xa3, 0xef, 0x13, 0x0d, 0x6e, 0x76,
	0xdf, 0xec, 0xba, 0x28, 0xdc, 0xee, 0x51, 0x57, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x05, 0x3e,
	0xd7, 0xc2, 0x3a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IngestorClient is the client API for Ingestor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IngestorClient interface {
	// IngestFileHandler processes ingestion requests.
	IngestFileHandler(ctx context.Context, in *IngestRequest, opts ...grpc.CallOption) (*IngestResponse, error)
}

type ingestorClient struct {
	cc *grpc.ClientConn
}

func NewIngestorClient(cc *grpc.ClientConn) IngestorClient {
	return &ingestorClient{cc}
}

func (c *ingestorClient) IngestFileHandler(ctx context.Context, in *IngestRequest, opts ...grpc.CallOption) (*IngestResponse, error) {
	out := new(IngestResponse)
	err := c.cc.Invoke(ctx, "/ingestor.Ingestor/IngestFileHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestorServer is the server API for Ingestor service.
type IngestorServer interface {
	// IngestFileHandler processes ingestion requests.
	IngestFileHandler(context.Context, *IngestRequest) (*IngestResponse, error)
}

func RegisterIngestorServer(s *grpc.Server, srv IngestorServer) {
	s.RegisterService(&_Ingestor_serviceDesc, srv)
}

func _Ingestor_IngestFileHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestorServer).IngestFileHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ingestor.Ingestor/IngestFileHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestorServer).IngestFileHandler(ctx, req.(*IngestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ingestor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ingestor.Ingestor",
	HandlerType: (*IngestorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestFileHandler",
			Handler:    _Ingestor_IngestFileHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ingestor.proto",
}
